# Generated by Django 4.2.20 on 2025-04-27 17:49

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BodyType',
            fields=[
                ('body_type_id', models.AutoField(db_column='BodyTypeID', primary_key=True, serialize=False)),
                ('body_type_name', models.CharField(db_column='BodyTypeName', max_length=50, unique=True)),
            ],
            options={
                'db_table': 'BodyType',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('car_id', models.AutoField(db_column='CarID', primary_key=True, serialize=False)),
                ('manufacture_year', models.IntegerField(blank=True, db_column='ManufactureYear', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=255, null=True)),
                ('vin', models.CharField(blank=True, db_column='VIN', max_length=17, null=True, unique=True)),
                ('mileage', models.IntegerField(blank=True, db_column='Mileage', null=True)),
            ],
            options={
                'db_table': 'Car',
            },
        ),
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('car_brand_id', models.AutoField(db_column='CarBrandID', primary_key=True, serialize=False)),
                ('brand_name', models.CharField(db_column='BrandName', max_length=100, unique=True)),
            ],
            options={
                'db_table': 'CarBrand',
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('color_id', models.AutoField(db_column='ColorID', primary_key=True, serialize=False)),
                ('color_name', models.CharField(db_column='ColorName', max_length=70, unique=True)),
            ],
            options={
                'db_table': 'Color',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(db_column='CustomerID', primary_key=True, serialize=False)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=100, null=True)),
                ('first_name', models.CharField(db_column='FirstName', max_length=50)),
                ('last_name', models.CharField(db_column='LastName', max_length=50)),
                ('phone_number', models.CharField(db_column='PhoneNumber', max_length=15)),
            ],
            options={
                'db_table': 'Customer',
            },
        ),
        migrations.CreateModel(
            name='DriveType',
            fields=[
                ('drive_type_id', models.AutoField(db_column='DriveTypeID', primary_key=True, serialize=False)),
                ('drive_type_name', models.CharField(db_column='DriveTypeName', max_length=50, unique=True)),
            ],
            options={
                'db_table': 'DriveType',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('employee_id', models.AutoField(db_column='EmployeeID', primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column='FirstName', max_length=50)),
                ('last_name', models.CharField(db_column='LastName', max_length=50)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=100, null=True)),
                ('phone_number', models.CharField(db_column='PhoneNumber', max_length=15)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=100, null=True)),
            ],
            options={
                'db_table': 'Employee',
            },
        ),
        migrations.CreateModel(
            name='EmployeePosition',
            fields=[
                ('employee_position_id', models.AutoField(db_column='EmployeePositionID', primary_key=True, serialize=False)),
                ('position_name', models.CharField(db_column='PositionName', max_length=100, unique=True)),
            ],
            options={
                'db_table': 'EmployeePosition',
            },
        ),
        migrations.CreateModel(
            name='EngineType',
            fields=[
                ('engine_type_id', models.AutoField(db_column='EngineTypeID', primary_key=True, serialize=False)),
                ('engine_type_name', models.CharField(db_column='EngineTypeName', max_length=50, unique=True)),
            ],
            options={
                'db_table': 'EngineType',
            },
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('part_id', models.AutoField(db_column='PartID', primary_key=True, serialize=False)),
                ('part_name', models.CharField(db_column='PartName', max_length=100)),
                ('weight', models.DecimalField(db_column='Weight', decimal_places=2, max_digits=10)),
                ('dimensions', models.CharField(blank=True, db_column='Dimensions', max_length=100, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('quantity_per_package', models.IntegerField(db_column='QuantityPerPackage')),
                ('price_per_package', models.DecimalField(db_column='PricePerPackage', decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'Part',
            },
        ),
        migrations.CreateModel(
            name='PartBrand',
            fields=[
                ('part_brand_id', models.AutoField(db_column='PartBrandID', primary_key=True, serialize=False)),
                ('brand_name', models.CharField(db_column='BrandName', max_length=100, unique=True)),
            ],
            options={
                'db_table': 'PartBrand',
            },
        ),
        migrations.CreateModel(
            name='PartInStation',
            fields=[
                ('part_in_station_id', models.AutoField(db_column='PartInStationID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(db_column='Quantity')),
                ('part', models.ForeignKey(db_column='PartID', on_delete=django.db.models.deletion.CASCADE, to='service_site.part')),
            ],
            options={
                'db_table': 'PartInStation',
            },
        ),
        migrations.CreateModel(
            name='PartType',
            fields=[
                ('part_type_id', models.AutoField(db_column='PartTypeID', primary_key=True, serialize=False)),
                ('part_type_name', models.CharField(db_column='PartTypeName', max_length=100, unique=True)),
            ],
            options={
                'db_table': 'PartType',
            },
        ),
        migrations.CreateModel(
            name='PaymentStatus',
            fields=[
                ('payment_status_id', models.AutoField(db_column='PaymentStatusID', primary_key=True, serialize=False)),
                ('payment_name', models.CharField(db_column='PaymentName', max_length=70, unique=True)),
            ],
            options={
                'db_table': 'PaymentStatus',
            },
        ),
        migrations.CreateModel(
            name='ProcurementOrder',
            fields=[
                ('procurement_order_id', models.AutoField(db_column='ProcurementOrderID', primary_key=True, serialize=False)),
                ('total_price', models.DecimalField(blank=True, db_column='TotalPrice', decimal_places=2, max_digits=10, null=True)),
                ('order_date', models.DateTimeField(blank=True, db_column='OrderDate', null=True)),
                ('order_number', models.CharField(blank=True, db_column='OrderNumber', max_length=50, null=True)),
                ('employee', models.ForeignKey(blank=True, db_column='EmployeeID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.employee')),
            ],
            options={
                'db_table': 'ProcurementOrder',
            },
        ),
        migrations.CreateModel(
            name='ProcurementStatus',
            fields=[
                ('procurement_status_id', models.AutoField(db_column='ProcurementStatusID', primary_key=True, serialize=False)),
                ('status_name', models.CharField(blank=True, db_column='StatusName', max_length=50, null=True)),
            ],
            options={
                'db_table': 'ProcurementStatus',
            },
        ),
        migrations.CreateModel(
            name='ProcurementUnit',
            fields=[
                ('procurement_unit_id', models.AutoField(db_column='ProcurementUnitID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(db_column='Quantity')),
                ('price_per_unit', models.DecimalField(blank=True, db_column='PricePerUnit', decimal_places=2, max_digits=10, null=True)),
                ('part', models.ForeignKey(db_column='PartID', on_delete=django.db.models.deletion.CASCADE, to='service_site.part')),
                ('procurement_order', models.ForeignKey(blank=True, db_column='ProcurementOrderID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.procurementorder')),
            ],
            options={
                'db_table': 'ProcurementUnit',
            },
        ),
        migrations.CreateModel(
            name='ProvidedService',
            fields=[
                ('provided_service_id', models.AutoField(db_column='ProvidedServiceID', primary_key=True, serialize=False)),
                ('provided_date', models.DateTimeField(blank=True, db_column='ProvidedDate', null=True)),
                ('employee', models.ForeignKey(blank=True, db_column='EmployeeID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.employee')),
            ],
            options={
                'db_table': 'ProvidedService',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('service_id', models.AutoField(db_column='ServiceID', primary_key=True, serialize=False)),
                ('service_name', models.CharField(db_column='ServiceName', max_length=100, unique=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=255, null=True)),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'Service',
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('service_type_id', models.AutoField(db_column='ServiceTypeID', primary_key=True, serialize=False)),
                ('service_type_name', models.CharField(db_column='ServiceTypeName', max_length=100, unique=True)),
            ],
            options={
                'db_table': 'ServiceType',
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('station_id', models.AutoField(db_column='StationID', primary_key=True, serialize=False)),
                ('address', models.CharField(db_column='Address', max_length=100)),
                ('phone_number', models.CharField(db_column='PhoneNumber', max_length=25)),
            ],
            options={
                'db_table': 'Station',
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('supplier_id', models.AutoField(db_column='SupplierID', primary_key=True, serialize=False)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=100, null=True)),
                ('phone_number', models.CharField(blank=True, db_column='PhoneNumber', max_length=15, null=True)),
                ('supplier_name', models.CharField(blank=True, db_column='SupplierName', max_length=100, null=True)),
            ],
            options={
                'db_table': 'Supplier',
            },
        ),
        migrations.CreateModel(
            name='SuspensionType',
            fields=[
                ('suspension_type_id', models.AutoField(db_column='SuspensionTypeID', primary_key=True, serialize=False)),
                ('suspension_type_name', models.CharField(db_column='SuspensionTypeName', max_length=50, unique=True)),
            ],
            options={
                'db_table': 'SuspensionType',
            },
        ),
        migrations.CreateModel(
            name='TransmissionType',
            fields=[
                ('transmission_type_id', models.AutoField(db_column='TransmissionTypeID', primary_key=True, serialize=False)),
                ('transmission_type_name', models.CharField(db_column='TransmissionTypeName', max_length=50, unique=True)),
            ],
            options={
                'db_table': 'TransmissionType',
            },
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('visit_id', models.AutoField(db_column='VisitID', primary_key=True, serialize=False)),
                ('visit_date', models.DateTimeField(db_column='VisitDate', default=django.utils.timezone.now)),
                ('planned_end_date', models.DateTimeField(blank=True, db_column='PlannedEndDate', null=True)),
                ('actual_end_date', models.DateTimeField(blank=True, db_column='ActualEndDate', null=True)),
                ('details', models.CharField(blank=True, db_column='Details', max_length=500, null=True)),
                ('visit_number', models.IntegerField(db_column='VisitNumber')),
                ('price', models.DecimalField(blank=True, db_column='Price', decimal_places=2, max_digits=10, null=True)),
                ('payment_date', models.DateTimeField(blank=True, db_column='PaymentDate', null=True)),
                ('car', models.ForeignKey(db_column='CarID', on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='service_site.car')),
                ('employee', models.ForeignKey(db_column='EmployeeID', on_delete=django.db.models.deletion.CASCADE, to='service_site.employee')),
                ('payment_status', models.ForeignKey(blank=True, db_column='PaymentStatusID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.paymentstatus')),
            ],
            options={
                'db_table': 'Visit',
            },
        ),
        migrations.CreateModel(
            name='VisitStatus',
            fields=[
                ('visit_status_id', models.AutoField(db_column='VisitStatusID', primary_key=True, serialize=False)),
                ('status_name', models.CharField(db_column='StatusName', max_length=70, unique=True)),
            ],
            options={
                'db_table': 'VisitStatus',
            },
        ),
        migrations.CreateModel(
            name='VisitService',
            fields=[
                ('visit_service_id', models.AutoField(db_column='VisitServiceID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(db_column='Quantity')),
                ('service', models.ForeignKey(db_column='ServiceID', on_delete=django.db.models.deletion.CASCADE, to='service_site.service')),
                ('visit', models.ForeignKey(db_column='VisitID', on_delete=django.db.models.deletion.CASCADE, related_name='visit_services', to='service_site.visit')),
            ],
            options={
                'db_table': 'VisitService',
            },
        ),
        migrations.AddField(
            model_name='visit',
            name='visit_status',
            field=models.ForeignKey(db_column='VisitStatusID', on_delete=django.db.models.deletion.CASCADE, to='service_site.visitstatus'),
        ),
        migrations.CreateModel(
            name='StoragePlacement',
            fields=[
                ('storage_placement_id', models.AutoField(db_column='StoragePlacementID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(blank=True, db_column='Quantity', null=True)),
                ('placement_date', models.DateTimeField(blank=True, db_column='PlacementDate', null=True)),
                ('part_in_station', models.ForeignKey(db_column='PartInStationID', on_delete=django.db.models.deletion.CASCADE, to='service_site.partinstation')),
                ('procurement_unit', models.ForeignKey(db_column='ProcurementUnitID', on_delete=django.db.models.deletion.CASCADE, to='service_site.procurementunit')),
            ],
            options={
                'db_table': 'StoragePlacement',
            },
        ),
        migrations.AddField(
            model_name='service',
            name='service_type',
            field=models.ForeignKey(blank=True, db_column='ServiceTypeID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.servicetype'),
        ),
        migrations.CreateModel(
            name='RequiredPart',
            fields=[
                ('required_part_id', models.AutoField(db_column='RequiredPartID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(db_column='Quantity')),
                ('part_in_station', models.ForeignKey(db_column='PartInStationID', on_delete=django.db.models.deletion.CASCADE, to='service_site.partinstation')),
                ('provided_service', models.ForeignKey(db_column='ProvidedServiceID', on_delete=django.db.models.deletion.CASCADE, related_name='required_parts', to='service_site.providedservice')),
            ],
            options={
                'db_table': 'RequiredPart',
            },
        ),
        migrations.AddField(
            model_name='providedservice',
            name='visit_service',
            field=models.OneToOneField(db_column='VisitServiceID', on_delete=django.db.models.deletion.CASCADE, related_name='provided_service', to='service_site.visitservice'),
        ),
        migrations.AddField(
            model_name='procurementorder',
            name='procurement_status',
            field=models.ForeignKey(blank=True, db_column='ProcurementStatusID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.procurementstatus'),
        ),
        migrations.AddField(
            model_name='procurementorder',
            name='supplier',
            field=models.ForeignKey(blank=True, db_column='SupplierID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.supplier'),
        ),
        migrations.AddField(
            model_name='partinstation',
            name='station',
            field=models.ForeignKey(db_column='StationID', on_delete=django.db.models.deletion.CASCADE, to='service_site.station'),
        ),
        migrations.AddField(
            model_name='part',
            name='part_brand',
            field=models.ForeignKey(blank=True, db_column='PartBrandID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.partbrand'),
        ),
        migrations.AddField(
            model_name='part',
            name='part_type',
            field=models.ForeignKey(blank=True, db_column='PartTypeID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.parttype'),
        ),
        migrations.AddField(
            model_name='employee',
            name='employee_position',
            field=models.ForeignKey(blank=True, db_column='EmployeePositionID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_site.employeeposition'),
        ),
        migrations.AddField(
            model_name='employee',
            name='station',
            field=models.ForeignKey(db_column='StationID', on_delete=django.db.models.deletion.CASCADE, to='service_site.station'),
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('car_model_id', models.AutoField(db_column='CarModelID', primary_key=True, serialize=False)),
                ('model_name', models.CharField(db_column='ModelName', max_length=100, unique=True)),
                ('dimensions', models.CharField(blank=True, db_column='Dimensions', max_length=35, null=True)),
                ('body_type', models.ForeignKey(blank=True, db_column='BodyTypeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.bodytype')),
                ('car_brand', models.ForeignKey(blank=True, db_column='CarBrandID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.carbrand')),
                ('drive_type', models.ForeignKey(blank=True, db_column='DriveTypeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.drivetype')),
                ('engine_type', models.ForeignKey(blank=True, db_column='EngineTypeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.enginetype')),
                ('suspension_type', models.ForeignKey(blank=True, db_column='SuspensionTypeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.suspensiontype')),
                ('transmission_type', models.ForeignKey(blank=True, db_column='TransmissionTypeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.transmissiontype')),
            ],
            options={
                'db_table': 'CarModel',
            },
        ),
        migrations.AddField(
            model_name='car',
            name='car_model',
            field=models.ForeignKey(db_column='CarModelID', on_delete=django.db.models.deletion.CASCADE, to='service_site.carmodel'),
        ),
        migrations.AddField(
            model_name='car',
            name='color',
            field=models.ForeignKey(db_column='ColorID', on_delete=django.db.models.deletion.CASCADE, to='service_site.color'),
        ),
        migrations.AddField(
            model_name='car',
            name='customer',
            field=models.ForeignKey(db_column='CustomerID', on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='service_site.customer'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('employee', models.OneToOneField(blank=True, db_column='EmployeeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_site.employee')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='partinstation',
            unique_together={('station', 'part')},
        ),
    ]
